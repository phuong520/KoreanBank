@model IEnumerable<KEB.Application.DTOs.QuestionDTO.QuestionDisplayDto>
@using KEB.Domain.Enums

@{



    ViewBag.Title = "Ngân hàng câu hỏi";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var difficulties = Enum.GetValues(typeof(Difficulty)).Cast<Difficulty>().ToList();

    var skills = Enum.GetValues(typeof(Skill)).Cast<Skill>().ToList();

    var status = Enum.GetValues(typeof(QuestionStatus)).Cast<QuestionStatus>().ToList();

}
<header>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <style>
        .filter-item label {
        font-size: 0.9rem;
        }

        .dropdown-toggle {
        background-color: white;
        border: 1px solid #ced4da;
        text-align: left;
        font-size: 0.9rem;
        }

        .dropdown-toggle::after {
        float: right;
        margin-top: 8px;
        }

        .card {
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }

        .page-link {
        color: #007bff;
        }

        .page-item.active .page-link {
        background-color: #343a40;
        border-color: #343a40;
        }

        .search-box input {
        border-right: none;
        }

        .search-box .input-group-text {
        background-color: white;
        border-left: none;
        }

        .nav-tabs .nav-link {
        color: #007bff;
        }

        .nav-tabs .nav-link.active {
        font-weight: 500;
        }
    </style>

</header>
<div class="container-fluid">
    <div class="row">
        <!-- Left sidebar with filters -->
        <div class="col-md-3" style="padding: 20px; border-right: 1px solid #e0e0e0;">
            <h2>Ngân hàng câu hỏi</h2>

            <form id="filterForm" method="get" asp-controller="Question" asp-action="Index">
                <div class="mt-4">
                    <h6>Filter</h6>
                    <div class="search-box mt-3">
                        <div class="input-group">
                            <input name="Search" type="text" class="form-control" placeholder="Tìm kiếm">
                            <div class="input-group-append">
                                <span class="input-group-text bg-white">
                                    <i class="fa fa-search"></i>
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- Trạng thái -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Trạng thái</label>
                        <div class="dropdown">
                            <select name="Status" class="form-select">
                                <option value="">-- Chọn trạng thái --</option>
                                @foreach (var sta in status)
                                {
                                    <option value="@((int)sta)">@sta</option>
                                }
                            </select>
                        </div>
                    </div>
                    <!-- Trình Độ -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Trình Độ</label>
                        <div class="dropdown">
                            <select name="LevelIds" class="form-select" asp-items="ViewBag.Levels">
                                <option value="">-- Chọn trình độ --</option>
                            </select>
                        </div>
                    </div>

                    <!-- Dạng Câu Hỏi -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Dạng Câu Hỏi</label>
                        <div class="dropdown">
                            <select name="QuestionTypeIds" class="form-select" asp-items="ViewBag.QuestionTypes">
                                <option value="">-- Chọn dạng câu hỏi --</option>
                            </select>
                        </div>
                    </div>

                    <!-- Mức Độ -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Độ khó</label>
                        <div class="dropdown">
                            <select class="form-select" name="Difficulty">
                                <option value="">-- Chọn dạng độ khó --</option>
                                @foreach (var diff in difficulties)
                                {
                                    <option value="@((int)diff)">@diff</option>
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Loại Câu Hỏi -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Loại Câu Hỏi</label>
                        <div class="dropdown">
                            <select name="IsMultipleChoice" class="form-select">
                                <option value="">-- Chọn loại câu hỏi -- </option>
                                <option value="True">Trắc nghiệm</option>
                                <option value="False">Tự luận</option>
                            </select>
                        </div>
                    </div>

                    <!-- Nguồn Tham Khảo -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Nguồn Tham Khảo</label>
                        <div class="dropdown">
                            <select name="ReferenceIds" class="form-select" asp-items="ViewBag.References">
                                <option value="">-- Chọn nguồn tham khảo --</option>
                            </select>
                        </div>
                    </div>

                    <!-- Chủ Đề -->
                    <div class="filter-item mt-3">
                        <label class="text-primary mb-1">Chủ Đề</label>
                        <div class="dropdown">
                            <select name="TopicIds" class="form-select" asp-items="ViewBag.Topics">
                                <option value="">-- Chọn chủ đề --</option>
                            </select>
                        </div>
                    </div>
                    <input type="submit" class="btn btn-primary mt-3" value="Lọc câu hỏi" />
                </div>
            </form>
        </div>

        <!-- Right content with question list -->
        <!-- Right content with question list -->
        <div class="col-md-9" style="padding: 20px;">
            <!-- Tabs -->
            <ul class="nav nav-tabs">
                @foreach (var skill in skills)
                {
                    var isActive = (int)skill == 0 ? "active" : "";
                    <li class="nav-item">
                        <a class="nav-link @isActive" href="javascript:void(0);" data-skill="@skill.ToString().ToLower()">@skill</a>
                    </li>
                }
            </ul>

            <div class="tab-content mt-3">
                <div class="tab-pane active" id="nghe">
                    <h5 class="mb-4">Danh Sách Câu Hỏi</h5>

                    @foreach (var question in Model)
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <!-- Handle attachments -->
                                @if (question.AttachmentAudio != null)
                                {

                                    <div class="mb-2">
                                        <audio controls class="audio-preview mb-3">
                                            <source src="data:audio/*;base64,@question.AttachmentAudio" type="audio/mpeg">
                                            Trình duyệt của bạn không hỗ trợ audio.
                                        </audio>
                                    </div>
                                }
                                @if ((question.AttachmentImage != null))
                                {
                                    <div class="mb-2">
                                        <img src="data:Image/*;base64,@question.AttachmentImage" alt="Question Image" class="img-fluid" style="max-width: 100%; max-height: 100px;" />
                                    </div>

                                }

                                <div class="d-flex justify-content-between">
                                    <h6 class="card-title">@question.QuestionContent</h6>
                                    <div>
                                        <a href="#" class="btn btn-sm btn-outline-secondary mr-1"><i class="fa fa-search"></i></a>
                                        <a href="@Url.Action("Edit", "Question", new { id = question.Id })" class="btn btn-sm btn-outline-primary">
                                            <i class="fa fa-eye"></i>
                                        </a>
                                    </div>
                                </div>
                                <div class="mt-2">
                                    @if (question.Answers != null && question.Answers.Any())
                                    {
                                        int index = 0;
                                        foreach (var answer in question.Answers)
                                        {
                                            var label = ((char)('A' + index)).ToString();
                                            <div class="mb-1">
                                                <strong>@label.</strong> @answer.Content
                                            </div>
                                            index++;
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-danger">Không có đáp án nào.</p>
                                    }
                                </div>
                                <div class="mt-3 text-muted">
                                    <small>
                                        @question.LevelName | @question.QuestionTypeName | @question.SkillName | @question.ReferenceName | @question.TopicName
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            @for (int p = 1; p <= (int)ViewBag.TotalPages; p++)
                            {
                                <li class="page-item @(p ==  (int)ViewBag.Page ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = p, size = ViewBag.Size })">@p</a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize dropdowns
            $('.dropdown-toggle').dropdown();

            // Add active class to selected dropdown items
            $('.dropdown-item').on('click', function() {
                const selected = $(this).text();
                $(this).closest('.dropdown').find('.dropdown-toggle').text(selected);
            });
        });
    </script>
    @* <script> *@
    @*     $(document).ready(function () { *@
    @*         // Submit form khi chọn filter *@
    @*         $('#filterForm select').on('change', function () { *@
    @*              $('#filterForm').submit(); *@
    @*         }); *@

    @*         // Skill tab click *@
    @*         $('.nav-link').on('click', function () { *@
    @*             const selectedSkill = $(this).data('skill'); *@
    @*             const form = $('#filterForm'); *@

    @*             // Thêm input ẩn chứa skill *@
    @*             if (form.find('input[name="Skill"]').length === 0) { *@
    @*                 form.append(`<input type="hidden" name="Skill" value="${selectedSkill}" />`); *@
    @*             } else { *@
    @*                 form.find('input[name="Skill"]').val(selectedSkill); *@
    @*             } *@

    @*             form.submit(); *@
    @*         }); *@
    @*     }); *@
    @* </script> *@
    <script>
        $(document).ready(function () {
            // Lấy skill hiện tại từ URL hoặc tab active
            let currentSkill = getCurrentSkill();

            // Cập nhật active tab dựa trên skill hiện tại
            updateActiveTab(currentSkill);

            // Submit form khi chọn filter
            $('#filterForm select').on('change', function () {
                // Có thể bỏ comment dòng này nếu muốn auto-submit khi thay đổi filter
                // $('#filterForm').submit();
            });

            // Skill tab click
            $('.nav-link').on('click', function () {
                const selectedSkill = $(this).data('skill');
                currentSkill = selectedSkill;

                // Cập nhật active tab
                updateActiveTab(selectedSkill);

                // Submit form với skill và reset về trang 1
                submitFormWithSkill(selectedSkill, 1);
            });

            // Pagination click
            $('.pagination .page-link').on('click', function (e) {
                e.preventDefault();

                const href = $(this).attr('href');
                const url = new URL(href, window.location.origin);
                const page = url.searchParams.get('page') || 1;

                // Submit form với skill hiện tại và trang được chọn
                submitFormWithSkill(currentSkill, page);
            });

            // Hàm lấy skill hiện tại
            function getCurrentSkill() {
                // Kiểm tra URL parameters trước
                const urlParams = new URLSearchParams(window.location.search);
                const skillFromUrl = urlParams.get('Skill');

                if (skillFromUrl) {
                    return skillFromUrl.toLowerCase();
                }

                // Nếu không có trong URL, lấy từ tab active
                const activeTab = $('.nav-link.active');
                if (activeTab.length > 0) {
                    return activeTab.data('skill');
                }

                // Mặc định là skill đầu tiên
                return $('.nav-link').first().data('skill');
            }

            // Hàm cập nhật active tab
            function updateActiveTab(skill) {
                $('.nav-link').removeClass('active');
                $(`.nav-link[data-skill="${skill}"]`).addClass('active');
            }

            // Hàm submit form với skill và page
            function submitFormWithSkill(skill, page) {
                const form = $('#filterForm');

                // Cập nhật hoặc thêm input hidden cho Skill
                let skillInput = form.find('input[name="Skill"]');
                if (skillInput.length === 0) {
                    form.append(`<input type="hidden" name="Skill" value="${skill}" />`);
                } else {
                    skillInput.val(skill);
                }

                // Cập nhật hoặc thêm input hidden cho Page
                let pageInput = form.find('input[name="page"]');
                if (pageInput.length === 0) {
                    form.append(`<input type="hidden" name="page" value="${page}" />`);
                } else {
                    pageInput.val(page);
                }

                // Submit form
                form.submit();
            }

            // Hàm để tạo URL phân trang với skill hiện tại
            function createPaginationUrl(page) {
                const form = $('#filterForm');
                const formData = new FormData(form[0]);
                const params = new URLSearchParams();

                // Thêm tất cả form data vào params
                for (let [key, value] of formData.entries()) {
                    if (value && value.trim() !== '') {
                        params.append(key, value);
                    }
                }

                // Thêm skill hiện tại
                params.set('Skill', currentSkill);
                // Thêm page
                params.set('page', page);

                return '?' + params.toString();
            }

            // Cập nhật lại href của các link phân trang để bao gồm skill
            function updatePaginationLinks() {
                $('.pagination .page-link').each(function() {
                    const originalHref = $(this).attr('href');
                    if (originalHref && originalHref !== '#') {
                        const url = new URL(originalHref, window.location.origin);
                        const page = url.searchParams.get('page') || 1;
                        const newUrl = createPaginationUrl(page);
                        $(this).attr('href', newUrl);
                    }
                });
            }

            // Gọi hàm cập nhật pagination links khi trang load
            updatePaginationLinks();
        });
    </script>
}