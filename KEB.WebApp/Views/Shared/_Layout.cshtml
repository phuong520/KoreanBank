@using System.IdentityModel.Tokens.Jwt
@using System.Linq
@using System.Security.Claims
@using KEB.Application.DTOs.NotificationDTO
@{
    var token = Context.Request.Cookies["token"];
    var username = string.Empty;
    var role = string.Empty;
    var userId = string.Empty;
    var avatarUrl = Url.Content("~/images/default-avatar.png");
   
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
            if (jsonToken != null)
            {
                    role = jsonToken.Claims.FirstOrDefault(c => c.Type == "role")?.Value;
                    username = jsonToken.Claims.FirstOrDefault(c => c.Type == "unique_name")?.Value;
                    userId = jsonToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Sid)?.Value;
                    var avatarId = jsonToken.Claims.FirstOrDefault(c => c.Type == "avatar")?.Value;
                    avatarUrl = string.IsNullOrEmpty(avatarId)
                        ? Url.Content("~/images/default-avatar.png")
                        : $"https://localhost:7101/api/ImageFile/Download?id={avatarId}";
                    
                
            }
        }
        catch (Exception ex)
        {
            // redirectToLogin = true; Lỗi khi xử lý token
            Console.WriteLine($"Lỗi xử lý token: {ex.Message}"); // Debug trong dev
        }
    }


<!DOCTYPE html>
<html lang="vi" class="h-100">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Korean Exam Bank</title>

    <!-- Fonts & Icons -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

    <!-- CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        .notification-list {
            position: absolute;
            top: 100%;
            right: 0;
            width: 300px;
            max-height: 400px;
            overflow-y: auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: none;
            z-index: 1000;
        }

        .notification-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background 0.2s;
            background-color: #ffffff; /* Màu trắng cho thông báo đã đọc */
        }

            .notification-item.unread {
                background-color: #e9f5ff; /* Màu xanh nhạt cho thông báo chưa đọc */
                font-weight: 500;
            }

            .notification-item:hover {
                background-color: #f8f9fa; /* Màu xám nhạt khi hover */
            }

        .notification-empty {
            padding: 10px;
            text-align: center;
            color: #888;
        }

        .notification-actions {
            padding: 10px;
            display: flex;
            justify-content: space-between;
            border-top: 1px solid #eee;
            background: #f8f9fa;
            position: sticky;
            bottom: 0;
        }

            .notification-actions a {
                color: #007bff;
                text-decoration: none;
                font-size: 0.9em;
            }

                .notification-actions a:hover {
                    text-decoration: underline;
                }
    </style>

    <!-- JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
</head>
<body class="d-flex flex-column h-100">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-brand d-flex align-items-center">
            <img src="~/images/korea.jpg" alt="Korean Exam Bank" class="me-2">
            <h5 class="mb-0">Korean Exam Bank</h5>
        </div>

        <nav class="sidebar-nav">
            <!-- Common Items -->
            <div class="nav-item">
                <a class="nav-link" asp-controller="Statistics" asp-action="Index">
                    <i class="bi bi-bar-chart-line"></i>
                    <span>Thống Kê</span>
                </a>
            </div>

            <!-- Admin Specific -->
            @if (role == "Quản trị viên")
            {
                <div class="nav-item">
                    <a class="nav-link" asp-controller="Users" asp-action="Index">
                        <i class="bi bi-people"></i>
                        <span>Danh sách tài khoản</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="AccessLog" asp-action="Index">
                        <i class="bi bi-activity"></i>
                        <span>Hoạt động</span>
                    </a>
                </div>
            }

            <!-- Manager Specific -->
            @if (role == "Quản lý")
            {
                <div class="nav-item">
                    <a class="nav-link" data-bs-toggle="collapse" href="#examMenu">
                        <i class="bi bi-journal-text"></i>
                        <span>Kỳ thi</span>
                        <i class="bi bi-chevron-down ms-auto"></i>
                    </a>
                    <div class="collapse nav-dropdown" id="examMenu">
                        <a class="nav-link" asp-controller="ExamType" asp-action="Index">Loại kỳ thi</a>
                        <a class="nav-link" asp-controller="Exam" asp-action="Index">Quản lý kỳ thi</a>
                    </div>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="Question" asp-action="Index">
                        <i class="bi bi-collection"></i>
                        <span>Ngân hàng câu hỏi</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="Paper" asp-action="Index">
                        <i class="bi bi-file-earmark-text"></i>
                        <span>Ngân hàng đề thi</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" data-bs-toggle="collapse" href="#taskMenu">
                        <i class="bi bi-list-task"></i>
                        <span>Nhiệm vụ</span>
                        <i class="bi bi-chevron-down ms-auto"></i>
                    </a>
                    <div class="collapse nav-dropdown" id="taskMenu">
                        <a class="nav-link" asp-controller="Task" asp-action="ReviewQuestion">Duyệt câu hỏi</a>
                        <a class="nav-link" asp-controller="Task" asp-action="Index">Quản lý nhiệm vụ</a>
                    </div>
                </div>
            }

            <!-- Teacher Specific -->
            @if (role == "Giảng viên")
            {
                <div class="nav-item">
                    <a class="nav-link" asp-controller="Levels" asp-action="Index">
                        <i class="bi bi-layers"></i>
                        <span>Cấp độ</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="Topics" asp-action="Index">
                        <i class="bi bi-tags"></i>
                        <span>Chủ đề</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="References" asp-action="Index">
                        <i class="bi bi-book"></i>
                        <span>Tài liệu tham khảo</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" data-bs-toggle="collapse" href="#importMenu">
                        <i class="bi bi-upload"></i>
                        <span>Nhập câu hỏi</span>
                        <i class="bi bi-chevron-down ms-auto"></i>
                    </a>
                    <div class="collapse nav-dropdown" id="importMenu">
                        <a class="nav-link" asp-controller="Question" asp-action="Create">Nhập thủ công</a>
                        <a class="nav-link" asp-controller="Question" asp-action="ImportExcel">Nhập bằng Excel</a>
                    </div>
                </div>

                <div class="nav-item">
                    <a class="nav-link" data-bs-toggle="collapse" href="#questionBankMenu">
                        <i class="bi bi-question-circle"></i>
                        <span>Ngân hàng câu hỏi</span>
                        <i class="bi bi-chevron-down ms-auto"></i>
                    </a>
                    <div class="collapse nav-dropdown" id="questionBankMenu">
                        <a class="nav-link" asp-controller="QuestionType" asp-action="Index">Loại câu hỏi</a>
                        <a class="nav-link" asp-controller="Question" asp-action="Index">Danh sách câu hỏi</a>
                    </div>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="Paper" asp-action="Index">
                        <i class="bi bi-file-earmark-richtext"></i>
                        <span>Ngân hàng đề thi</span>
                    </a>
                </div>

                <div class="nav-item">
                    <a class="nav-link" asp-controller="Task" asp-action="Index">
                        <i class="bi bi-check-circle"></i>
                        <span>Nhiệm vụ</span>
                    </a>
                </div>
            }
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content d-flex flex-column">
        <!-- Topbar -->
        <header class="topbar d-flex justify-content-end align-items-center">
            <button class="btn btn-outline-primary d-none sidebar-toggler">
                <i class="bi bi-list"></i>
            </button>

            <div class="d-flex align-items-center gap-3">
                <!-- Notification -->
                <div class="notification-container position-relative">
                    <div id="notification-header" class="notification-header" title="Xem thông báo">
                        <svg class="bell-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M12 24c1.104 0 2-.896 2-2h-4c0 1.104.896 2 2 2zm6-6v-5c0-3.07-1.63-5.64-4.5-6.32V6a1.5 1.5 0 1 0-3 0v.68C7.63 7.36 6 9.93 6 13v5l-2 2v1h16v-1l-2-2z" />
                        </svg>
                        <span id="notification-badge" class="badge">0</span>
                    </div>
                    <ul id="notification-list" class="notification-list">
                        <li class="notification-empty">Không có thông báo mới</li>
                    </ul>
                </div>

                <!-- User Profile -->
                <div class="dropdown position-relative">
                    <div id="userDropdown" class="d-flex align-items-center gap-2 dropdown-toggle" role="button">
                        <img src="@avatarUrl" alt="Avatar" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover; cursor: pointer;" />
                        <div class="text-end">
                            <strong>@username</strong><br />
                            <small>@role</small>
                        </div>
                    </div>

                    <ul class="dropdown-menu dropdown-menu-end" id="userDropdownMenu" aria-labelledby="userDropdown">
                        <li><a class="dropdown-item" asp-controller="Users" asp-action="Details">Tài Khoản</a></li>
                        <li><a class="dropdown-item" asp-controller="Commonweb" asp-action="ChangePassword">Đổi Mật Khẩu</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form asp-controller="Commonweb" asp-action="Logout" method="post">
                                <button class="dropdown-item text-danger">Đăng Xuất</button>
                            </form>
                        </li>
                    </ul>
                </div>
            </div>
        </header>

        <!-- Content -->
        <main class="content-wrapper flex-grow-1">
            @RenderBody()
        </main>

        <!-- Footer -->
        <footer class="bg-light py-3 text-center">
            <div class="container">
                <span class="text-muted">© @DateTime.Now.Year Korean Exam Bank - Hệ thống ngân hàng đề thi tiếng Hàn</span>
            </div>
        </footer>
    </div>

    <!-- Scripts -->
    @RenderSection("Scripts", required: false)
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const userId = @Html.Raw(Json.Serialize(userId));
            console.log("User ID from Razor:", userId);

            if (!userId) {
                console.warn("No user ID found, redirecting to login");
                // window.location.href = "/Commonweb/Login";
                return;
            }

            // Toggle sidebar on mobile
            document.querySelector('.sidebar-toggler').addEventListener('click', function() {
                document.querySelector('.sidebar').classList.toggle('show');
            });

            const toggleBtn = document.getElementById('userDropdown');
            const dropdownMenu = document.getElementById('userDropdownMenu');

            if (toggleBtn && dropdownMenu) {
                toggleBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    dropdownMenu.classList.toggle('show');
                });
            } else {
                console.warn('Không tìm thấy phần tử toggleBtn hoặc dropdownMenu');
            }

            document.addEventListener('click', function (e) {
                if (!toggleBtn.contains(e.target) && !dropdownMenu.contains(e.target)) {
                    dropdownMenu.classList.remove('show');
                }
            });

            function toggleSection(sectionId) {
                const section = document.getElementById(sectionId);
                if (section) {
                    section.style.display = section.style.display === 'none' ? 'block' : 'none';
                }
            }

            const notifHeader = document.getElementById('notification-header');
            const notifList = document.getElementById('notification-list');
            const badge = document.getElementById('notification-badge');

            // Hàm cập nhật số lượng thông báo chưa đọc
            function updateBadge() {
                const unreadItems = document.querySelectorAll('.notification-item.unread');
                badge.textContent = unreadItems.length;
                console.log('Số thông báo chưa đọc:', unreadItems.length);
            }

            // Hàm đánh dấu một thông báo là đã đọc
            function markAsRead(notiId, element) {
                console.log('Đánh dấu thông báo đã đọc, ID:', notiId);
                fetch(`https://localhost:7101/api/Notification/markasread/${notiId}`, {
                    method: 'PUT',
                    credentials: 'include' // Gửi cookie tự động, bao gồm token HttpOnly
                })
                .then(response => {
                    console.log('Mã trạng thái API markasread:', response.status);
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    return response.text();
                })
                .then(data => {
                    console.log('Phản hồi API markasread:', data);
                    if (typeof data === 'string' && data.includes('read') || (data.isSuccess === true)) {
                        element.classList.remove('unread');
                        if (element.querySelector('.is-read')) {
                            element.querySelector('.is-read').textContent = 'Đã đọc';
                        }
                        updateBadge();
                        loadNotifications();
                    } else {
                        console.error('Lỗi khi đánh dấu đã đọc:', data);
                    }
                })
                .catch(error => console.error('Lỗi khi gọi API markasread:', error));
            }

            // Hàm đánh dấu tất cả là đã đọc
            function markAllAsRead() {
                console.log('Đánh dấu tất cả thông báo đã đọc, User ID:', userId);
                fetch(`https://localhost:7101/api/Notification/mark-all-as-read/${userId}`, {
                    method: 'PUT',
                    credentials: 'include' // Gửi cookie tự động, bao gồm token HttpOnly
                })
                .then(response => {
                    console.log('Mã trạng thái API mark-all-as-read:', response.status);
                    return response.text();
                })
                .then(data => {
                    console.log('Phản hồi API mark-all-as-read:', data);
                    if (typeof data === 'string' && data.includes('read') || (data.isSuccess === true)) {
                        document.querySelectorAll('.notification-item.unread').forEach(item => {
                            item.classList.remove('unread');
                        });
                        updateBadge();
                        loadNotifications();
                    } else {
                        console.error('Lỗi khi đánh dấu tất cả đã đọc:', data);
                    }
                })
                .catch(error => console.error('Lỗi khi gọi API mark-all-as-read:', error));
            }

            // Tải danh sách thông báo
            function loadNotifications() {
                console.log('Tải danh sách thông báo cho User ID:', userId);
                fetch(`https://localhost:7101/api/Notification/get-all/${userId}`, {
                    credentials: 'include' // Gửi cookie tự động, bao gồm token HttpOnly
                })
                .then(response => {
                    console.log('Mã trạng thái API get-all:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Dữ liệu thông báo:', data);
                    notifList.innerHTML = '';
                    if (Array.isArray(data) && data.length > 0) {
                        const notificationsToShow = data.slice(0, 7);
                        notificationsToShow.forEach(notif => {
                            const li = document.createElement('li');
                            li.className = 'notification-item' + (notif.isRead ? '' : ' unread');
                            li.dataset.id = notif.id;
                            li.innerHTML = `
                                <div>${new Date(notif.createdTime).toLocaleString('vi-VN')}</div>
                                <small>${notif.description}</small>
                            `;
                            li.addEventListener('click', function() {
                                if (!notif.isRead) {
                                    markAsRead(notif.id, this);
                                }
                            });
                            notifList.appendChild(li);
                        });

                        const actionsDiv = document.createElement('div');
                        actionsDiv.className = 'notification-actions';
                        actionsDiv.innerHTML = `
                            <a href="#" id="mark-all-read">Đánh dấu tất cả đã đọc</a>
                            <a href="/Notification/Index" >Xem tất cả</a>
                        `;
                        notifList.appendChild(actionsDiv);

                        const markAllRead = actionsDiv.querySelector('#mark-all-read');
                        if (markAllRead) {
                            markAllRead.addEventListener('click', (e) => {
                                e.preventDefault();
                                markAllAsRead();
                            });
                        }
                        updateBadge();
                    } else {
                        notifList.innerHTML = '<li class="notification-empty">Không có thông báo mới</li>';
                        badge.textContent = '0';
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi tải thông báo:', error);
                    notifList.innerHTML = '<li class="notification-empty">Lỗi tải thông báo</li>';
                });
            }

            if (notifHeader && notifList) {
                notifHeader.addEventListener('click', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    const allDropdowns = document.querySelectorAll('.dropdown-menu.show');
                    allDropdowns.forEach(dropdown => {
                        dropdown.classList.remove('show');
                    });
                    notifList.classList.toggle('show');
                    loadNotifications();
                });

                document.addEventListener('click', (e) => {
                    if (!notifHeader.contains(e.target) && !notifList.contains(e.target)) {
                        notifList.classList.remove('show');
                    }
                });
            }

            // Khởi tạo kết nối SignalR
            let connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:7101/notify", {
                    withCredentials: true // Gửi cookie tự động, bao gồm token HttpOnly
                })
                .build();

            console.log("Starting SignalR connection...");

            connection.start()
                .then(() => {
                    console.log("SignalR connected");
                    return connection.invoke("GetLatestNoti");
                })
                .catch(err => {
                    console.error("SignalR connection error or invoke error:", err);
                    if (err.statusCode === 401 || err.statusCode === 403) {
                        window.location.href = "/Commonweb/Login";
                    }
                });

            connection.on("SendLatestNotifications", (notis) => {
                console.log("New notifications received:", notis);
                const unreadCount = notis.filter(n => !n.isRead).length;
                notis.forEach(noti => showNotification(noti, unreadCount));
            });

            connection.on("UpdateNotificationStatus", (notiId, isRead) => {
                console.log(`Notification ${notiId} updated, isRead: ${isRead}`);
                const page = document.body.dataset.page;

                if (page === "notification-index") {
                    const row = document.querySelector(`.notification-item[data-id="${notiId}"]`);
                    if (row) {
                        if (isRead) {
                            row.classList.remove("unread");
                            row.querySelector(".is-read").textContent = "Đã đọc";
                        } else {
                            row.classList.add("unread");
                            row.querySelector(".is-read").textContent = "Chưa đọc";
                        }
                    }
                } else {
                    const item = document.querySelector(`#notification-list .notification-item[data-id="${notiId}"]`);
                    if (item) {
                        if (isRead) {
                            item.classList.remove("unread");
                        } else {
                            item.classList.add("unread");
                        }
                        updateBadge();
                    }
                }
            });

            function showNotification(noti, unreadCount) {
                const page = document.body.dataset.page;
                console.log("Showing notification:", noti, "Unread count:", unreadCount, "Page:", page);

                if (page === "notification-index") {
                    const tableBody = document.querySelector(".notification-table tbody");
                    if (!tableBody) {
                        console.warn("Table body not found in notification index page");
                        return;
                    }

                    const existingRow = tableBody.querySelector(`.notification-item[data-id="${noti.id}"]`);
                    if (existingRow) {
                        console.log(`Notification ${noti.id} already exists in table`);
                        return;
                    }

                    const row = document.createElement("tr");
                    row.classList.add("notification-item");
                    if (!noti.isRead) {
                        row.classList.add("unread");
                    }
                    row.dataset.id = noti.id;
                    row.innerHTML = `
                        <td>${noti.id}</td>
                        <td>${noti.description}</td>
                        <td class="is-read">${noti.isRead ? "Đã đọc" : "Chưa đọc"}</td>
                        <td>${new Date(noti.createdTime).toLocaleString("vi-VN")}</td>
                    `;
                    row.addEventListener("click", function () {
                        if (!noti.isRead) {
                            markAsRead(noti.id, this);
                        }
                    });
                    tableBody.prepend(row);
                } else {
                    const notificationList = document.getElementById("notification-list");
                    const badge = document.getElementById("notification-badge");

                    if (!notificationList || !badge) {
                        console.warn("Element notification-list or notification-badge not found");
                        return;
                    }

                    const existingItem = notificationList.querySelector(`.notification-item[data-id="${noti.id}"]`);
                    if (existingItem) {
                        console.log(`Notification ${noti.id} already exists in dropdown`);
                        return;
                    }

                    const li = document.createElement("li");
                    li.classList.add("notification-item");
                    if (!noti.isRead) {
                        li.classList.add("unread");
                    }
                    li.dataset.id = noti.id;
                    li.innerHTML = `
                        <div>${noti.description}</div>
                        <small>${new Date(noti.createdTime).toLocaleString("vi-VN")}</small>
                    `;
                    li.addEventListener("click", function () {
                        if (!noti.isRead) {
                            markAsRead(noti.id, this);
                        }
                    });

                    const emptyMsg = notificationList.querySelector(".notification-empty");
                    if (emptyMsg) {
                        emptyMsg.remove();
                    }

                    notificationList.prepend(li);

                    const items = notificationList.querySelectorAll(".notification-item");
                    if (items.length > 7) {
                        items[items.length - 1].remove();
                    }

                    badge.textContent = unreadCount;
                }
            }
        });
    </script>
</body>
</html>