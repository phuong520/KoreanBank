@model KEB.Application.DTOs.ExamPaperDTO.PaperDetailDisplayDTO
@using System.Linq
@using KEB.Domain.Entities
@using System.IdentityModel.Tokens.Jwt
@{
    var token = Context.Request.Cookies["token"];
    var userId = Guid.Empty;
    if (!string.IsNullOrEmpty(token))
    {
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

        if (jsonToken != null)
        {
            var sidClaim = jsonToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid");
            if (sidClaim != null && Guid.TryParse(sidClaim.Value, out var parsedGuid))
            {
                userId = parsedGuid;
            }
        }
    }
    bool isPaperCreating = Model.PaperStatus.ToString() == "Creating";
    bool isPaperInReview = Model.PaperStatus.ToString() == "InReview";
    bool isHost = userId == Model.HostId;
    bool isReviewer = userId == Model.ReviewerId;

}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chi tiết đề thi</title>
    <link rel="stylesheet" href="~/css/paperDetail.css" />
    <style>
        /* Additional styles for the comment section */
        .comment-section {
        margin-top: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 5px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .comment-section textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        resize: vertical;
        min-height: 100px;
        }

        .action-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 15px;
        }

        .btn-review {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        }

        .btn-suggest {
        background-color: #ffc107;
        color: #212529;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        }

        .btn-send {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        }

        .attachment img {
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Tab Navigation -->
        <div class="tabs">
            <button class="tab-button active" onclick="openTab(event, 'paperDetails')">Chi tiết đề thi</button>
            <button class="tab-button" onclick="openTab(event, 'paperActivities')">Hoạt động đề thi</button>
        </div>

        <!-- Paper Details Tab - now includes questions by type view -->
        <div id="paperDetails" class="tab-content active">
            <!-- Header information section -->
            <div class="header-title" style="align-content: center">Thông Tin Bài Thi</div>
            <div class="header-section" style="display: flex; justify-content: space-between;">
                <!-- Left side header -->
                <div class="header-left" style="flex: 1;">
                    <br />
                    <div class="exam-info">
                        <div class="info-item">
                            <div class="info-label">Tên đề thi:</div>
                            <div class="info-value">@Model.PaperName</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Kỹ năng:</div>
                            <div class="info-value">@Model.PaperConstraint.Skill</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Trình độ:</div>
                            <div class="info-value">@Model.LevelName</div>
                        </div>
                    </div>
                    <div class="info-label blue-text">Tổng kết:</div>
                    <div class="info-item">
                        <div class="info-label">
                            <span>Tổng Số Câu: @Model.QuestionsList.Count</span>
                        </div>
                    </div>

                    @{
                        var easyQuestions = Model.PaperConstraint.ConstraintDetails.Where(c => c.Difficulty == KEB.Domain.Enums.Difficulty.Dễ).Sum(c => c.NumOfQuestions);
                        var mediumQuestions = Model.PaperConstraint.ConstraintDetails.Where(c => c.Difficulty == KEB.Domain.Enums.Difficulty.Vừa).Sum(c => c.NumOfQuestions);
                        var hardQuestions = Model.PaperConstraint.ConstraintDetails.Where(c => c.Difficulty == KEB.Domain.Enums.Difficulty.Khó).Sum(c => c.NumOfQuestions);
                    }

                    <div class="info-container" style="align-items: flex-end">
                        <div class="info-item">
                            <div class="info-label">Dễ:</div>
                            <div class="info-value"><span>@easyQuestions câu</span></div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Trung bình:</div>
                            <div class="info-value"><span>@mediumQuestions câu</span></div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Khó:</div>
                            <div class="info-value"><span>@hardQuestions câu</span></div>
                        </div>
                    </div>

                </div>

                <!-- Right side header -->
                <br />
                <br />
                <div class="header-right" style="flex: 1;">
                    <div class="exam-info">
                        <div class="info-item">
                            <div class="info-label">Kỳ thi:</div>
                            <div class="info-value">@Model.ExamName</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Ngày thi:</div>
                            <div class="info-value">@Model.TakePlaceTime.ToString("dd/MM/yyyy")</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Trạng thái:</div>
                            <div class="info-value">@Model.PaperStatus.ToString()</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Questions by Type Section -->
            <div class="questions-by-type">
                @{
                    // Group questions by question type
                    var questionsByType = Model.QuestionsList.GroupBy(q => q.QuestionTypeName).ToList();
                    int stt = 1;
                }

                @foreach (var typeGroup in questionsByType)
                {
                    var questionType = typeGroup.Key;
                    var questions = typeGroup.ToList();
                    var halfCount = (questions.Count + 1) / 2; 

                    <!-- Question Type Header -->
                    <div class="question-type-header">@stt. @questionType </div>

                    <!-- Navigation for this section -->
                    <div class="question-navigation">
                    </div>

                    <!-- Questions Container with Two Columns -->
                    <div class="questions-container">
                        <!-- Left Column -->
                        <div class="question-column">
                            @{int index = 1;}
                            @for (int i = 0; i < halfCount; i++)
                            {
                                var question = questions[i];
                                <div class="question-item">
                                    <div class="attachment">
                                        @if (question.AttachmentAudio != null)
                                        {

                                            <div class="mb-2">
                                                <audio controls class="audio-preview mb-3">
                                                    <source src="data:audio/*;base64,@question.AttachmentAudio" type="audio/mpeg">
                                                    Trình duyệt của bạn không hỗ trợ audio.
                                                </audio>
                                            </div>
                                        }
                                        @if ((question.AttachmentImage != null))
                                        {
                                            <div class="mb-2">
                                                <img src="data:Image/*;base64,@question.AttachmentImage" alt="Question Image" class="img-fluid" style="max-width: 200px; max-height: 200px;" />
                                            </div>

                                        }
                                    </div>
                                    <div class="question-content">
                                        @index. @question.QuestionContent
                                        <span class="search-icon">🔍</span>
                                    </div>
                                    <div class="question-options">
                                        @for (int j = 0; j < question.Answers.Count(); j++)
                                        {
                                            var optionLabel = (char)('A' + j);
                                            <div class="option-item">@optionLabel. @question.Answers.ElementAt(j).Content</div>
                                        }
                                    </div>
                                    <div class="question-footer">
                                        <a href="#">@question.LevelName</a> |
                                        <a href="#">@question.Difficulty</a> |
                                        <a href="#">@question.QuestionTypeName</a> |
                                        <a href="#">@question.ReferenceName</a>
                                    </div>
                                </div>
                                index ++;
                            }
                        </div>

                        <!-- Right Column -->
                        <div class="question-column">
                            
                            @for (int i = halfCount; i < questions.Count; i++)
                            {
                                var question = questions[i];
                                <div class="question-item">
                                    <div class="attachment">
                                        @if (question.AttachmentAudio != null)
                                        {

                                            <div class="mb-2">
                                                <audio controls class="audio-preview mb-3">
                                                    <source src="data:audio/*;base64,@question.AttachmentAudio" type="audio/mpeg">
                                                    Trình duyệt của bạn không hỗ trợ audio.
                                                </audio>
                                            </div>
                                        }
                                        @if ((question.AttachmentImage != null))
                                        {
                                            <div class="mb-2">
                                                <img src="data:Image/*;base64,@question.AttachmentImage" alt="Question Image" class="img-fluid" style="max-width: 200px; max-height: 200px;" />
                                            </div>

                                        }
                                    </div>
                                    <div class="question-content">
                                        @(index). @question.QuestionContent
                                        <span class="search-icon">🔍</span>
                                    </div>
                                    <div class="question-options">
                                        @for (int j = 0; j < question.Answers.Count(); j++)
                                        {
                                            var optionLabel = (char)('A' + j);
                                            <div class="option-item">@optionLabel. @question.Answers.ElementAt(j).Content</div>
                                        }
                                    </div>
                                    <div class="question-footer">
                                        <a href="#">@question.LevelName</a> |
                                        <a href="#">@question.Difficulty</a> |
                                        <a href="#">@question.QuestionTypeName</a> |
                                        <a href="#">@question.ReferenceName</a>
                                    </div>
                                </div>
                                index++;
                            }
                        </div>
                    </div>
                    stt++;
                }
            </div>

            <!-- Comment Section - conditionally displayed based on user role and paper status -->
            @if ((isPaperInReview) && (isHost || isReviewer))
            {
                <div class="comment-section">
                    <h3>Nhận xét:</h3>
                    <textarea name="Content" id="commentText" placeholder="Nhập nhận xét của bạn về đề thi này..."></textarea>
                </div>
            }

            <!-- Bottom buttons with conditional rendering based on role and status -->
         <!-- Bottom buttons with conditional rendering based on role and status -->
<div class="button-group-custom">
    <button class="btn-custom btn-back" onclick="history.back()">🔙 Quay Lại</button>

    <form asp-action="PreviewPaper" asp-controller="Paper" method="get" style="display: inline;">
        <input type="hidden" name="paperId" value="@Model.PaperId" />
        <button type="submit" class="btn-custom btn-preview">👁 Xem trước</button>
    </form>

    @* <button class="btn-custom btn-download">⬇️ Tải Xuống</button> *@

    @if (isPaperCreating && isHost)
    {
        <button class="btn-custom btn-send" onclick="sendToReviewerAPI('@Model.PaperId', '@userId')">📤 Gửi Cho Reviewer</button>
    }

    @if (isPaperInReview && isHost)
    {
        <button class="btn-custom btn-send" onclick="sendToReviewer('@Model.PaperId', '@userId')">📤 Gửi Cho Reviewer</button>
    }

    @if (isPaperInReview && isReviewer)
    {
        <button class="btn-custom btn-suggest" onclick="suggestChanges('@Model.PaperId', '@userId')">✏️ Đề Xuất Chỉnh Sửa</button>
        <button class="btn-custom btn-review" onclick="approvePaper('@Model.PaperId', '@userId')">✅ Duyệt Đề Thi</button>
    }
</div>

        </div>

        <!-- Paper Activities Tab -->
        <div id="paperActivities" class="tab-content">
            <div class="header-title">Hoạt Động Đề Thi</div>
            <div class="activity-log">
                <div id="loading" class="loading">Đang tải hoạt động...</div>
                <div id="activityList"></div>
            </div>

            <!-- Bottom buttons for activities tab -->
            <div class="button-group" style="text-align: center; margin-top: 20px;">
                <button class="btn" onclick="history.back()">Quay Lại</button>
                <button class="btn btn-primary" onclick="refreshActivities()">Làm Mới</button>
            </div>
        </div>
    </div>

    <script>
        // Tab functionality
        function openTab(evt, tabName) {
            // Hide all tab contents
            var tabContents = document.getElementsByClassName("tab-content");
            for (var i = 0; i < tabContents.length; i++) {
                tabContents[i].classList.remove("active");
            }

            // Remove active class from all tab buttons
            var tabButtons = document.getElementsByClassName("tab-button");
            for (var i = 0; i < tabButtons.length; i++) {
                tabButtons[i].classList.remove("active");
            }

            // Show the selected tab content and mark button as active
            document.getElementById(tabName).classList.add("active");
            evt.currentTarget.classList.add("active");

            // Load activities data if activities tab is selected
            if (tabName === 'paperActivities') {
                loadActivities();
            }
        }

        // Function to load activity data directly from the API
        function loadActivities() {
            var paperId = '@Model.PaperId'; // Get the paper ID from the model
            document.getElementById('loading').style.display = 'block';
            document.getElementById('activityList').innerHTML = '';

            fetch(`https://localhost:7101/api/ExamPapers/view-activities-on-paper?paperId=${paperId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('loading').style.display = 'none';
                    console.log('API Response:', data); // Debug log to see the response structure

                    // Access the data based on API response structure
                    let activities = null;
                    if (data && data.data) {
                        activities = data.data;
                    } else if (data && Array.isArray(data)) {
                        activities = data;
                    } else if (data && data.result) {
                        activities = data.result;
                    } else if (data && data.value) {
                        activities = data.value;
                    }

                    if (activities && activities.length > 0) {
                        renderActivities(activities);
                    } else {
                        document.getElementById('activityList').innerHTML =
                            '<div class="activity-item"><div class="activity-description">Không có hoạt động nào được ghi nhận.</div></div>';
                    }
                })
                .catch(error => {
                    document.getElementById('loading').style.display = 'none';
                    document.getElementById('activityList').innerHTML =
                        '<div class="activity-item"><div class="activity-description">Đã xảy ra lỗi khi tải dữ liệu hoạt động. Chi tiết lỗi: ' + error.message + '</div></div>';
                    console.error('Error fetching activities:', error);
                });
        }

        // Function to render activities in the UI as a timeline based on AccessLogDisplayDto
        function renderActivities(activities) {
            var activityListElement = document.getElementById('activityList');
            activityListElement.innerHTML = '';

            console.log('Activities to render:', activities); // Debug log

            if (!activities || activities.length === 0) {
                activityListElement.innerHTML = '<div class="activity-item"><div class="activity-description">Không có hoạt động nào được ghi nhận.</div></div>';
                return;
            }

            // Sort activities by accessTime (newest first)
            activities.sort((a, b) => new Date(b.accessTime) - new Date(a.accessTime));

            activities.forEach(activity => {
                // Format the timestamp
                const formattedDate = formatDateTime(activity.accessTime);
                // Create action description combining actionName and details
                const actionDescription = activity.actionName;
                const details = activity.details;

                var activityItem = document.createElement('div');
                activityItem.className = 'activity-item';
                activityItem.innerHTML = `
                    <div class="activity-time">${formattedDate}</div>
                    <div class="activity-description">
                        <div class="activity-action">${actionDescription}</div>
                        ${details ? `<div class="activity-details">${details}</div>` : ''}
                    </div>
                `;

                activityListElement.appendChild(activityItem);
            });
        }

        // Helper function to format date time
        function formatDateTime(dateTimeStr) {
            if (!dateTimeStr) return "Không có thời gian";

            try {
                const date = new Date(dateTimeStr);

                // Check if date is valid
                if (isNaN(date.getTime())) {
                    return dateTimeStr; // Return original string if date is invalid
                }

                return date.toLocaleString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit',
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
            } catch (error) {
                console.error('Error formatting date:', error);
                return dateTimeStr; // Return original string on error
            }
        }

        // Function to refresh activities
        function refreshActivities() {
            loadActivities();
        }

        // Function to leave a comment on the paper
        function leaveComment(paperId, userId, commentType) {
            const commentText = document.getElementById('commentText').value.trim();
            if (!commentText) {
                alert('Vui lòng nhập nhận xét trước khi thực hiện hành động này.');
                return Promise.reject('No comment text');
            }

            // Create the comment request object
            const commentRequest = {
                RequestedUserId: userId,
                TargetObjectId: paperId,
                Content: commentText,
                IpAddress: null // Server will capture this
            };

            console.log('Sending comment request:', commentRequest);

            return fetch('https://localhost:7101/api/ExamPapers/leave-comment-on-paper', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(commentRequest)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Không thể gửi nhận xét. Vui lòng thử lại sau.');
                }
                return response.json();
            })
            .then(data => {
                console.log('Comment submitted successfully:', data);
                document.getElementById('commentText').value = '';
                return data;
            })
            .catch(error => {
                console.error('Error submitting comment:', error);
                alert('Lỗi khi gửi nhận xét: ' + error.message);
                throw error;
            });
        }

        // Function for Host to mark paper as in review
        function markAsInReview(paperId, userId) {
            const commentText = document.getElementById('commentText')?.value.trim();

            // Confirm before proceeding
            if (!confirm('Bạn có chắc chắn muốn gửi đề thi này cho Reviewer không?')) {
                return;
            }

            // If comment section exists and has text, submit the comment first
            if (commentText) {
                leaveComment(paperId, userId)
                    .then(() => {
                        sendToReviewerAPI(paperId, userId);
                    })
                    .catch(error => {
                        console.error('Failed to leave comment:', error);
                    });
            } else {
                sendToReviewerAPI(paperId, userId);
            }
        }

        // Function to call the API for changing paper status to InReview
        function sendToReviewerAPI(paperId, userId) {
            const params = new URLSearchParams({
                requestedUserId: userId,
                paperId: paperId
            });

            fetch(`https://localhost:7101/api/ExamPapers/mark-paper-as-inreview?${params}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Không thể gửi đề thi cho Reviewer. Vui lòng thử lại sau.');
                }
                return response.json();
            })
            .then(data => {
                console.log('Paper sent to reviewer successfully:', data);
                alert('Đề thi đã được gửi cho Reviewer thành công!');
                window.location.reload(); // Reload page to show updated status
            })
            .catch(error => {
                console.error('Error sending paper to reviewer:', error);
                alert('Lỗi: ' + error.message);
            });
        }

        // Function for Host to mark paper as in review and send to reviewer
        function sendToReviewer(paperId, userId) {
            const commentText = document.getElementById('commentText')?.value.trim();

            // Confirm before proceeding
            if (!confirm('Bạn có chắc chắn muốn gửi đề thi này cho Reviewer không?')) {
                return;
            }

            // If comment section exists and has text, submit the comment first
            if (commentText) {
                leaveComment(paperId, userId)
                    .then(() => {
                        sendToReviewerAPI(paperId, userId);
                    })
                    .catch(error => {
                        console.error('Failed to leave comment:', error);
                    });
            } else {
                sendToReviewerAPI(paperId, userId);
            }
        }

        // Function for Reviewer to suggest changes
        function suggestChanges(paperId, userId) {
            const commentText = document.getElementById('commentText')?.value.trim();
            if (!commentText) {
                alert('Vui lòng nhập đề xuất chỉnh sửa của bạn trước khi gửi.');
                return;
            }

            leaveComment(paperId, userId)
                .then(() => {
                    alert('Đề xuất chỉnh sửa đã được gửi thành công!');
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Failed to send suggestion:', error);
                });
        }

        // Function for Reviewer to approve the paper
        function approvePaper(paperId, userId) {
            const commentText = document.getElementById('commentText')?.value.trim();

            // Confirm before proceeding
            if (!confirm('Bạn có chắc chắn muốn duyệt đề thi này không?')) {
                return;
            }

            // If comment section exists and has text, submit the comment first
            if (commentText) {
                leaveComment(paperId, userId)
                    .then(() => {
                        approveReviewAPI(paperId, userId);
                    })
                    .catch(error => {
                        console.error('Failed to leave comment:', error);
                    });
            } else {
                approveReviewAPI(paperId, userId);
            }
        }

        // Function to call the API for approving the paper
        function approveReviewAPI(paperId, userId) {
            const params = new URLSearchParams({
                requestedUserId: userId,
                paperId: paperId
            });

            fetch(`https://localhost:7101/api/ExamPapers/mark-paper-as-reviewdone?${params}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Không thể duyệt đề thi. Vui lòng thử lại sau.');
                }
                return response.json();
            })
            .then(data => {
                console.log('Paper approved successfully:', data);
                alert('Đề thi đã được duyệt thành công!');
                window.location.reload(); // Reload page to show updated status
            })
            .catch(error => {
                console.error('Error approving paper:', error);
                alert('Lỗi: ' + error.message);
            });
        }
    </script>
</body>
</html>