<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Statistics Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="~/css/chart.css" />
   <style>
       .nav-link{
           height: 48px;
       }
   </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Header -->
        <div class="dashboard-header">
            <h1>📊 Thống kê tổng quan</h1>
            <p>Hệ thống theo dõi và phân tích dữ liệu toàn diện</p>
        </div>

        <!-- Summary Stats -->
        <div class="stats-summary">
            <div class="stat-item">
                <div class="stat-number" id="totalQuestions">-</div>
                <div class="stat-label">Tổng số câu hỏi</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="totalExams">-</div>
                <div class="stat-label">Tổng số kỳ thi</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="totalPapers">-</div>
                <div class="stat-label">Tổng số đề thi</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="approvalRate">-</div>
                <div class="stat-label">Tỷ lệ duyệt (%)</div>
            </div>
        </div>

        <!-- Main Stats Grid -->
        <div class="stats-grid">
            <!-- Status Distribution Chart -->
            <div class="chart-card status-chart-card">
                <h3 class="chart-title">Phân bố trạng thái câu hỏi</h3>
                <div class="chart-container status-chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>

            <!-- Exams Line Chart -->
            <div class="chart-card">
                <h3 class="chart-title">Xu hướng kỳ thi theo tháng</h3>
                <div class="chart-container line-chart-container">
                    <canvas id="examChart"></canvas>
                </div>
            </div>

            <!-- Papers Line Chart -->
            <div class="chart-card">
                <h3 class="chart-title">Xu hướng đề thi theo tháng</h3>
                <div class="chart-container line-chart-container">
                    <canvas id="paperChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const CONFIG = {
            API_BASE: 'https://localhost:7101/api/Statistics',
            DATE_RANGE: {
                lowerBound: '2025-01-01T00:00:00',
                upperBound: '2025-12-31T23:59:59'
            },
            COLORS: {
                primary: '#667eea',
                secondary: '#764ba2',
                success: '#27AE60',
                warning: '#F1C40F',
                danger: '#E74C3C',
                gradient: ['#667eea', '#764ba2', '#f093fb', '#f5576c']
            }
        };

        // Utility functions
        async function fetchData(endpoint) {
            try {
                const url = `${CONFIG.API_BASE}/${endpoint}?lowerBound=${CONFIG.DATE_RANGE.lowerBound}&upperBound=${CONFIG.DATE_RANGE.upperBound}`;
                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return data.result || [];
            } catch (error) {
                console.error('Fetch error:', error);
                // Return mock data for all 12 months if API fails
                return generateEmptyMonthsData();
            }
        }

        function generateEmptyMonthsData() {
            const months = [];
            for (let i = 1; i <= 12; i++) {
                months.push({
                    statisticName: new Date(2025, i - 1, 1).toLocaleDateString('en-US', { month: '2-digit', year: 'numeric' }).replace('/', '/'),
                    statisticValue: 0
                });
            }
            return months;
        }

        function createGradient(ctx, colors) {
            const gradient = ctx.createLinearGradient(0, 0, 0, 400);
            colors.forEach((color, index) => {
                gradient.addColorStop(index / (colors.length - 1), color);
            });
            return gradient;
        }

        // Chart rendering functions
        async function renderStatusChart() {
            const data = await fetchData('imported-questions-by-status');
            const ctx = document.getElementById('statusChart').getContext('2d');

            const labels = data.map(x => x.statisticName);
            const values = data.map(x => x.statisticValue);

            const colorMap = {
                'Denied': CONFIG.COLORS.danger,
                'Pending': CONFIG.COLORS.warning,
                'Ok': CONFIG.COLORS.success
            };

            const colors = labels.map(label => colorMap[label] || '#BDC3C7');

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: colors,
                        borderColor: '#fff',
                        borderWidth: 3,
                        hoverBorderWidth: 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '60%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                font: { size: 14, weight: '500' },
                                color: '#2c3e50'
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            titleFont: { size: 14, weight: 'bold' },
                            bodyFont: { size: 13 },
                            cornerRadius: 8,
                            displayColors: true
                        }
                    },
                    animation: {
                        animateRotate: true,
                        duration: 2000
                    }
                }
            });

            // Update summary stats
            updateSummaryStats(data);
        }

        async function renderLineChart(canvasId, endpoint, label, color) {
            const data = await fetchData(endpoint);
            const ctx = document.getElementById(canvasId).getContext('2d');

            // Ensure we always have 12 months of data
            let processedData = data;
            if (data.length < 12) {
                processedData = generateEmptyMonthsData();
                // Merge actual data with empty months
                data.forEach(item => {
                    const monthIndex = processedData.findIndex(p => p.statisticName === item.statisticName);
                    if (monthIndex !== -1) {
                        processedData[monthIndex] = item;
                    }
                });
            }

            const labels = processedData.map(x => x.statisticName);
            const values = processedData.map(x => x.statisticValue);

            const gradient = createGradient(ctx, [color + '40', color + '10']);

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: label,
                        data: values,
                        borderColor: color,
                        backgroundColor: gradient,
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: color,
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            titleFont: { size: 14, weight: 'bold' },
                            bodyFont: { size: 13 },
                            cornerRadius: 8,
                            callbacks: {
                                title: function(tooltipItems) {
                                    return `Tháng ${tooltipItems[0].label}`;
                                },
                                label: function(context) {
                                    return `${context.dataset.label}: ${context.parsed.y.toLocaleString()}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0,0,0,0.1)',
                                drawBorder: false
                            },
                            ticks: {
                                font: { size: 12 },
                                color: '#666',
                                stepSize: 1,
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            }
                        },
                        x: {
                            grid: { display: false },
                            ticks: {
                                font: { size: 12 },
                                color: '#666',
                                maxRotation: 45,
                                minRotation: 0
                            }
                        }
                    },
                    elements: {
                        point: {
                            hoverBackgroundColor: color
                        }
                    },
                    animation: {
                        duration: 2000,
                        easing: 'easeInOutQuart'
                    }
                }
            });

            return values.reduce((sum, val) => sum + val, 0);
        }

        function updateSummaryStats(statusData) {
            const totalQuestions = statusData.reduce((sum, item) => sum + item.statisticValue, 0);
            const okQuestions = statusData.find(item => item.statisticName === 'Ok')?.statisticValue || 0;
            const approvalRate = totalQuestions > 0 ? Math.round((okQuestions / totalQuestions) * 100) : 0;

            document.getElementById('totalQuestions').textContent = totalQuestions.toLocaleString();
            document.getElementById('approvalRate').textContent = approvalRate;
        }

        // Initialize dashboard
        async function initDashboard() {
            try {
                // Show loading state
                document.getElementById('totalQuestions').textContent = 'Đang tải...';
                document.getElementById('totalExams').textContent = 'Đang tải...';
                document.getElementById('totalPapers').textContent = 'Đang tải...';
                document.getElementById('approvalRate').textContent = 'Đang tải...';

                // Render all charts
                await renderStatusChart();

                const totalExams = await renderLineChart(
                    'examChart',
                    'exams-by-month',
                    'Số kỳ thi',
                    CONFIG.COLORS.primary
                );

                const totalPapers = await renderLineChart(
                    'paperChart',
                    'exampapers-by-month',
                    'Số đề thi',
                    CONFIG.COLORS.secondary
                );

                // Update summary stats
                document.getElementById('totalExams').textContent = totalExams.toLocaleString();
                document.getElementById('totalPapers').textContent = totalPapers.toLocaleString();

            } catch (error) {
                console.error('Dashboard initialization error:', error);
                // Show error state
                document.getElementById('totalQuestions').textContent = 'Lỗi';
                document.getElementById('totalExams').textContent = 'Lỗi';
                document.getElementById('totalPapers').textContent = 'Lỗi';
                document.getElementById('approvalRate').textContent = 'Lỗi';
            }
        }

        // Start the dashboard
        document.addEventListener('DOMContentLoaded', initDashboard);
    </script>
</body>
</html>