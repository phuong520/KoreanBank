// <auto-generated />
using System;
using KEB.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KEB.Infrastructure.Migrations
{
    [DbContext(typeof(ExamBankContext))]
    [Migration("20250521041111_themAudioFile")]
    partial class themAudioFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KEB.Domain.Entities.AddQuestionTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficult")
                        .HasColumnType("int");

                    b.Property<bool>("ForMultiChoice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LevelDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleTaskId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignId");

                    b.HasIndex("LevelDetailId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("AddQuestionTask", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.ConstraintDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<Guid>("ExamTypeConstraintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.Property<float>("MarkPerQuestion")
                        .HasColumnType("real");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeConstraintId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("TopicId");

                    b.ToTable("ConstraintDetail", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExamTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TakePlaceTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("HostId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.ExamType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("ExamTypeConfiguration", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.ExamTypeConstraint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("ExamTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPaper")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("TotalNumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("ExamTypeConstraint", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImageFile", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Level", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a14f049-6666-4c9f-a834-d99b16176001"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelName = "Sơ cấp 1",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-6666-4c9f-a834-d99b16176002"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelName = "Sơ cấp 2",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-6666-4c9f-a834-d99b16176003"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelName = "Trung cấp 3",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.LevelDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("TopicId");

                    b.ToTable("LevelDetail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176001"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176001"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176001"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176002"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176001"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176002"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176003"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176001"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176003"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176001"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176002"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176004"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176002"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176002"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176005"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176003"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176002"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176006"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176001"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176003"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176007"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176002"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176003"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-7777-8888-a834-d99b16176008"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LevelId = new Guid("0a14f049-6666-4c9f-a834-d99b16176003"),
                            TopicId = new Guid("0a14f049-5555-4c9f-a834-d99b16176003"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.Paper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("PaperFileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaperName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaperStatus")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Paper", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.PaperDetail", b =>
                {
                    b.Property<Guid>("PaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentAudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Mark")
                        .HasColumnType("real");

                    b.Property<int>("OrderInPaper")
                        .HasColumnType("int");

                    b.HasKey("PaperId", "QuestionId");

                    b.HasIndex("AttachmentAudioId")
                        .IsUnique()
                        .HasFilter("[AttachmentAudioId] IS NOT NULL");

                    b.HasIndex("AttachmentImageId")
                        .IsUnique()
                        .HasFilter("[AttachmentImageId] IS NOT NULL");

                    b.HasIndex("QuestionId");

                    b.ToTable("PaperDetail", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachFileAudioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachFileImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AttachmentDuration")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.Property<Guid>("LevelDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttachFileAudioId")
                        .IsUnique()
                        .HasFilter("[AttachFileAudioId] IS NOT NULL");

                    b.HasIndex("AttachFileImageId")
                        .IsUnique()
                        .HasFilter("[AttachFileImageId] IS NOT NULL");

                    b.HasIndex("LevelDetailId");

                    b.HasIndex("LogId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("TaskId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<string>("TypeContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QuestionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a14f049-4da1-4c9f-a834-d99b16176f50"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            CreatedDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Skill = 1,
                            TypeContent = "다음을 듣고 질문을 답하십시오",
                            TypeName = "Nghe và trả lời câu hỏi",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            UpdatedDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-4da1-4c9f-a834-d99b16176f52"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            CreatedDate = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Skill = 2,
                            TypeContent = "다음을 듣고 알맟은 것을 고르십시오",
                            TypeName = "Tự sự về bản thân",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            UpdatedDate = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-4da1-4c9f-a834-d99b16176f53"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            CreatedDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Skill = 3,
                            TypeContent = "다음을 듣고 알맟은 것을 고르십시오",
                            TypeName = "Chọn ngữ pháp đúng điền vào chỗ trống",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            UpdatedDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-4da1-4c9f-a834-d99b16176f54"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            CreatedDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Skill = 4,
                            TypeContent = "다음을 듣고 알맟은 것을 고르십시오",
                            TypeName = "Viết câu 51,52",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a24072002"),
                            UpdatedDate = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.References", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferencesLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("References", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a14f049-4444-4c9f-a834-d99b16176001"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No info",
                            IsDeleted = false,
                            PublishedYear = 2002,
                            ReferenceAuthor = "No info",
                            ReferenceName = "Tiếng Hàn tổng hợp quyển 1",
                            ReferencesLink = "No info",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-4444-4c9f-a834-d99b16176002"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No info",
                            IsDeleted = false,
                            PublishedYear = 2002,
                            ReferenceAuthor = "No info",
                            ReferenceName = "Tiếng Hàn tổng hợp quyển 2",
                            ReferencesLink = "No info",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-4444-4c9f-a834-d99b16176000"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No info",
                            IsDeleted = false,
                            PublishedYear = 2002,
                            ReferenceAuthor = "No info",
                            ReferenceName = "Tài liệu khác",
                            ReferencesLink = "No info",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f089198c-ed4c-4294-9e62-ac9a09880000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleName = "Quản trị viên",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f089198c-ed4c-4294-9e62-ac9a09880001"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleName = "Quản lý",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f089198c-ed4c-4294-9e62-ac9a09880002"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleName = "Giảng viên",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.SystemAccessLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("TargetObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemAccessLog", (string)null);
                });

            modelBuilder.Entity("KEB.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Topic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a14f049-5555-4c9f-a834-d99b16176001"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            TopicName = "인사",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-5555-4c9f-a834-d99b16176002"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            TopicName = "교통",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a14f049-5555-4c9f-a834-d99b16176003"),
                            CreatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            CreatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            TopicName = "과일",
                            UpdatedBy = new Guid("0000198c-ed4c-4294-9e62-ac9a02012003"),
                            UpdatedDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Avatar")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Avatar")
                        .IsUnique()
                        .HasFilter("[Avatar] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a089198c-ed4c-4294-9e62-ac9a09880000"),
                            Avatar = new Guid("25e6a826-7d08-476b-b0bc-dc832e20d66f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateOnly(1990, 1, 1),
                            Email = "phuongminzy2@gmail.com",
                            FullName = "Hoàng Thị Phương",
                            Gender = true,
                            IsActive = true,
                            IsDeleted = false,
                            NotificationId = new Guid("854e9a4a-1827-4753-a267-823e36a683f2"),
                            Password = "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("f089198c-ed4c-4294-9e62-ac9a09880000"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("a089198c-ed4c-4294-9e62-ac9a09880001"),
                            Avatar = new Guid("f06c7d54-653f-4de7-a588-31c632178194"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateOnly(1992, 5, 20),
                            Email = "thanhphongh5201314@gmail.com",
                            FullName = "Nguyễn Thanh Phong",
                            Gender = false,
                            IsActive = true,
                            IsDeleted = false,
                            NotificationId = new Guid("73f5a628-9cb1-4c50-8d04-419203bffc19"),
                            Password = "5830aa9ba1fd7843c92fd956cb640604e6d3bff683ddeeac778e0af21089a303",
                            PhoneNumber = "0987654321",
                            RoleId = new Guid("f089198c-ed4c-4294-9e62-ac9a09880001"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "teamlead"
                        },
                        new
                        {
                            Id = new Guid("a089198c-ed4c-4294-9e62-ac9a09880002"),
                            Avatar = new Guid("0c62c57c-a15f-43a2-8829-ff6e36009719"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateOnly(1995, 10, 15),
                            Email = "blueberry5201314@gmail.com",
                            FullName = "Lê Thanh Xuân",
                            Gender = true,
                            IsActive = true,
                            IsDeleted = false,
                            NotificationId = new Guid("6836861f-4071-4844-a5c6-98267b1ed8fb"),
                            Password = "a4c3fcb625ccf255765afd5e3548839e8a2de6c587d7125dfba735dda69dbe22",
                            PhoneNumber = "0112233445",
                            RoleId = new Guid("f089198c-ed4c-4294-9e62-ac9a09880002"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "lecturer"
                        });
                });

            modelBuilder.Entity("KEB.Domain.Entities.AddQuestionTask", b =>
                {
                    b.HasOne("KEB.Domain.Entities.User", "User")
                        .WithMany("AddQuestions")
                        .HasForeignKey("AssignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.LevelDetail", "LevelDetail")
                        .WithMany("AddQuestions")
                        .HasForeignKey("LevelDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.QuestionType", "QuestionType")
                        .WithMany("AddQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelDetail");

                    b.Navigation("QuestionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Answer", b =>
                {
                    b.HasOne("KEB.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("KEB.Domain.Entities.ConstraintDetail", b =>
                {
                    b.HasOne("KEB.Domain.Entities.ExamTypeConstraint", "ExamTypeConstraint")
                        .WithMany("ConstraintDetails")
                        .HasForeignKey("ExamTypeConstraintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.QuestionType", "QuestionType")
                        .WithMany("ConstraintDetails")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.Topic", "Topic")
                        .WithMany("ConstraintDetails")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamTypeConstraint");

                    b.Navigation("QuestionType");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Exam", b =>
                {
                    b.HasOne("KEB.Domain.Entities.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.User", "Host")
                        .WithMany("HostedExams")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.User", "Reviewer")
                        .WithMany("ReviewedExams")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamType");

                    b.Navigation("Host");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("KEB.Domain.Entities.ExamType", b =>
                {
                    b.HasOne("KEB.Domain.Entities.Level", "Levels")
                        .WithMany("ExamTypes")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("KEB.Domain.Entities.ExamTypeConstraint", b =>
                {
                    b.HasOne("KEB.Domain.Entities.ExamType", "ExamType")
                        .WithMany("ExamTypeConstraints")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamType");
                });

            modelBuilder.Entity("KEB.Domain.Entities.LevelDetail", b =>
                {
                    b.HasOne("KEB.Domain.Entities.Level", "Level")
                        .WithMany("LevelDetails")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.Topic", "Topic")
                        .WithMany("LevelDetails")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Notification", b =>
                {
                    b.HasOne("KEB.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Paper", b =>
                {
                    b.HasOne("KEB.Domain.Entities.Exam", "Exam")
                        .WithMany("Papers")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("KEB.Domain.Entities.PaperDetail", b =>
                {
                    b.HasOne("KEB.Domain.Entities.ImageFile", "AttachmentAudio")
                        .WithOne("PaperDetailAudio")
                        .HasForeignKey("KEB.Domain.Entities.PaperDetail", "AttachmentAudioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("KEB.Domain.Entities.ImageFile", "AttachmentImage")
                        .WithOne("PaperDetailImage")
                        .HasForeignKey("KEB.Domain.Entities.PaperDetail", "AttachmentImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("KEB.Domain.Entities.Paper", "Paper")
                        .WithMany("PaperDetails")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.Question", "Question")
                        .WithMany("PaperDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AttachmentAudio");

                    b.Navigation("AttachmentImage");

                    b.Navigation("Paper");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Question", b =>
                {
                    b.HasOne("KEB.Domain.Entities.ImageFile", "AttachmentFileAudio")
                        .WithOne("QuestionForAudio")
                        .HasForeignKey("KEB.Domain.Entities.Question", "AttachFileAudioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("KEB.Domain.Entities.ImageFile", "AttachmentFileImage")
                        .WithOne("QuestionForImage")
                        .HasForeignKey("KEB.Domain.Entities.Question", "AttachFileImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("KEB.Domain.Entities.LevelDetail", "LevelDetail")
                        .WithMany("Questions")
                        .HasForeignKey("LevelDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.SystemAccessLog", "SystemAccessLog")
                        .WithMany("Questions")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.References", "References")
                        .WithMany("Questions")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KEB.Domain.Entities.AddQuestionTask", "AddQuestionTask")
                        .WithMany("Questions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AddQuestionTask");

                    b.Navigation("AttachmentFileAudio");

                    b.Navigation("AttachmentFileImage");

                    b.Navigation("LevelDetail");

                    b.Navigation("QuestionType");

                    b.Navigation("References");

                    b.Navigation("SystemAccessLog");
                });

            modelBuilder.Entity("KEB.Domain.Entities.SystemAccessLog", b =>
                {
                    b.HasOne("KEB.Domain.Entities.User", "User")
                        .WithMany("SystemAccessLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KEB.Domain.Entities.User", b =>
                {
                    b.HasOne("KEB.Domain.Entities.ImageFile", "ImageFile")
                        .WithOne("User")
                        .HasForeignKey("KEB.Domain.Entities.User", "Avatar");

                    b.HasOne("KEB.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageFile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KEB.Domain.Entities.AddQuestionTask", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Exam", b =>
                {
                    b.Navigation("Papers");
                });

            modelBuilder.Entity("KEB.Domain.Entities.ExamType", b =>
                {
                    b.Navigation("ExamTypeConstraints");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("KEB.Domain.Entities.ExamTypeConstraint", b =>
                {
                    b.Navigation("ConstraintDetails");
                });

            modelBuilder.Entity("KEB.Domain.Entities.ImageFile", b =>
                {
                    b.Navigation("PaperDetailAudio")
                        .IsRequired();

                    b.Navigation("PaperDetailImage")
                        .IsRequired();

                    b.Navigation("QuestionForAudio")
                        .IsRequired();

                    b.Navigation("QuestionForImage")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("KEB.Domain.Entities.Level", b =>
                {
                    b.Navigation("ExamTypes");

                    b.Navigation("LevelDetails");
                });

            modelBuilder.Entity("KEB.Domain.Entities.LevelDetail", b =>
                {
                    b.Navigation("AddQuestions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Paper", b =>
                {
                    b.Navigation("PaperDetails");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("PaperDetails");
                });

            modelBuilder.Entity("KEB.Domain.Entities.QuestionType", b =>
                {
                    b.Navigation("AddQuestions");

                    b.Navigation("ConstraintDetails");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("KEB.Domain.Entities.References", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KEB.Domain.Entities.SystemAccessLog", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("KEB.Domain.Entities.Topic", b =>
                {
                    b.Navigation("ConstraintDetails");

                    b.Navigation("LevelDetails");
                });

            modelBuilder.Entity("KEB.Domain.Entities.User", b =>
                {
                    b.Navigation("AddQuestions");

                    b.Navigation("HostedExams");

                    b.Navigation("Notifications");

                    b.Navigation("ReviewedExams");

                    b.Navigation("SystemAccessLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
